一、稀疏数组
public class sparseArrayTest01 {
    public static void main(String[] args) {
//        创建原始二维数组11*11
//        0表示无旗子，1表示黑子，2表示白子
        int chessArr1[][] = new int [11][11];
        chessArr1[1][2] = 1;
        chessArr1[2][3] = 2;
//        输出原始二维数组
        System.out.println("原始二维数组");
        for(int[] row : chessArr1){
            for(int data :row ){
                System.out.print(data+"   ");
            }
            System.out.println();
        }
//        二维数组转稀疏数组
//        第一步：遍历原始二维数组，找到非0数
        int sum = 0;
        for (int i = 0; i < chessArr1.length; i++) {    //二维数组.length为其行数；二维数组[0].length为其列数

            for (int j = 0; j <chessArr1[0].length ; j++) {
                if(chessArr1[i][j] != 0){
                    sum++;
                }
            }
        }
        System.out.println("sum="+sum);
//        第二步：创建稀疏数组
        int sparseArr1[][] = new int [sum+1][3];
//        第三步：将有效数据存入稀疏数组
        sparseArr1[0][0] = chessArr1.length;
        sparseArr1[0][1] = chessArr1[0].length;
        sparseArr1[0][2] = sum;
//        遍历二维数组，将非0值存入稀疏数组
        int count = 0;      //用于记录是第几个非0数据
        for (int i = 0; i < chessArr1.length; i++) {
            for (int j = 0; j <chessArr1[0].length ; j++) {
                if(chessArr1[i][j] != 0){
                    count++;
                   sparseArr1[count][0] = i;
                   sparseArr1[count][1] = j;
                   sparseArr1[count][2] = chessArr1[i][j];

                }
            }
        }
//        输出稀疏数组
        System.out.println("稀疏维数组");
        for (int i = 0; i < sparseArr1.length; i++) {
            System.out.println(sparseArr1[i][0]+"  "+sparseArr1[i][1]+"  "+sparseArr1[i][2]);
        }
//        稀疏数组转二维数组
//        第一步：读取稀疏数组第一行，根据第一行数据，创建原始二维数组
        int chessArr2[][] = new int[sparseArr1[0][0]][sparseArr1[0][1]];
//        第二步：读取稀疏数组，并赋给原始数组
        for (int i = 1; i < sparseArr1.length; i++) {
            chessArr2[sparseArr1[i][0]][sparseArr1[i][1]] = sparseArr1[i][2];

        }
//        原始二维数组数组
        System.out.println("原始二维数组");
        for(int[] row : chessArr1){
            for(int data :row ){
                System.out.print(data+"   ");
            }
            System.out.println();
        }
    }
}



二、队列

import java.util.Scanner;
/**
 * @author Cloud7Walker
 * @date 2020/3/11 - 12:34
 */
public class ArrayQueueTest01 {
    public static void main(String[] args) {
//        创建一个队列对象
        ArrayQueue queue = new ArrayQueue(3);
        char key = ' ';//接收用户输入
        Scanner scanner = new Scanner(System.in);//键盘输入
        boolean loop = true;
//       输出一个菜单
        while (loop){
            System.out.println("=======请输入指令=======");
            System.out.println("s(show):显示队列");
            System.out.println("e(exit):退出程序");
            System.out.println("a(add):添加数据到队列");
            System.out.println("g(get):从队列取出数据");
            System.out.println("h(head):查看队列头数据");
            key = scanner.next().charAt(0);//接收一个字符

            switch (key){
                case 's':
                    queue.showQueue();
                    break;

                case 'a':
                    System.out.println("请输入添加数据");
                    int value = scanner.nextInt();
                    queue.addQueue(value);
                    break;

                case 'g':
                    try{
                       int res = queue.getQueue();
                        System.out.println("取出的数据为："+res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;

                case'h':
                    queue.headQueue();
                    break;

                case'e':
                    scanner.close();
                    loop = false;
                    break;

                default:
                    break;
            }
        }
        System.out.println("程序退出！");
    }
}

//使用数组模拟队列 编写一个ArrayQueue类
class ArrayQueue {
    //    定义属性
    private int maxSize;
    private int front;
    private int rear;
    private int[] arr;//该数据用于存放数组

    //    创建队列的构造器
    public ArrayQueue(int arrMaxSize) {
        maxSize = arrMaxSize;
        arr = new int[maxSize];
        front = -1;//指向队列头部，是指向队列头的前一个位置
        rear = -1;//指向队列尾部，直接指向队列最后一个数据
    }

    //    创建判断队列是否为满的方法
    public boolean isFull() {
        return rear == maxSize - 1;
    }

    //    创建判断队列是否为空的方法
    public boolean isEmpty() {
        return front == rear;
    }

    //    创建添加数据到队列的方法
    public void addQueue(int n) {
//    判断队列是否为满
        if (isFull()) {
            System.out.println("队列满！无法继续加入数据！");
            return;
        }
        rear++;//让rear后移
        arr[rear] = n;
    }

    //   创建出队列的方法
    public int getQueue() {
//   判断队列是否为空
        if (isEmpty()) {
            throw new RuntimeException("队列空！无法取出数据！");
        }
        front++;//让front后移
        return arr[front];

    }

    //    显示队列所有数据
    public void showQueue() {
        if (isEmpty()) {
            System.out.println("队列目前为空！无数据！");
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.println(i + "=" + arr[i]);
        }
    }

    //    显示队列的头数据
    public void headQueue() {
        if (isEmpty()) {
            System.out.println("队列目前为空！无数据！");

        }
        System.out.println("目前队列头为："+arr[front + 1]);
    }
}
//问题：数组使用一次就不能用了，没有达到复用的效果
//     将这个数组使用算法，改进为一个环形数组




import java.util.Scanner;

/**
 * @author Cloud7Walker
 * @date 2020/3/11 - 23:10
 */
public class CircleArrayQueueTest01 {
    public static void main(String[] args) {
//        创建一个环形队列对象
        circleArray queue = new circleArray(4);//设置为4，其队列有效数据最大是3
        char key = ' ';//接收用户输入
        Scanner scanner = new Scanner(System.in);//键盘输入
        boolean loop = true;
//       输出一个菜单
        while (loop){
            System.out.println("=======请输入指令=======");
            System.out.println("s(show):显示队列");
            System.out.println("e(exit):退出程序");
            System.out.println("a(add):添加数据到队列");
            System.out.println("g(get):从队列取出数据");
            System.out.println("h(head):查看队列头数据");
            key = scanner.next().charAt(0);//接收一个字符

            switch (key){
                case 's':
                    queue.showQueue();
                    break;

                case 'a':
                    System.out.println("请输入添加数据");
                    int value = scanner.nextInt();
                    queue.addQueue(value);
                    break;

                case 'g':
                    try{
                        int res = queue.getQueue();
                        System.out.println("取出的数据为："+res);
                    }catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;

                case'h':
                    queue.headQueue();
                    break;

                case'e':
                    scanner.close();
                    loop = false;
                    break;

                default:
                    break;
            }
        }
        System.out.println("程序退出！");
    }

}

class circleArray{
    //    定义属性
    private int maxSize;
    private int front;
    private int rear;
    private int[] arr;//该数据用于存放数组
    //    创建队列的构造器
    public circleArray(int arrMaxSize) {
        maxSize = arrMaxSize;
        arr = new int[maxSize];
        front = 0;//直接指向队列头
        rear = 0;//指向队列尾后一个位置
    }
    //    创建判断队列是否为满的方法
    public boolean isFull() {
        return (rear + 1 ) % maxSize == front;
    }
    //    创建判断队列是否为空的方法
    public boolean isEmpty() {
        return front == rear;
    }
    //    创建添加数据到队列的方法
    public void addQueue(int n) {
//    判断队列是否为满
        if (isFull()) {
            System.out.println("队列满！无法继续加入数据！");
            return;
        }
        arr[rear] = n;//直接加入数据
        rear = (rear + 1) % maxSize;//rear后移，必须考虑取模
    }
    //   创建出队列的方法
    public int getQueue() {
//   判断队列是否为空
        if (isEmpty()) {
            throw new RuntimeException("队列空！无法取出数据！");
        }
//        第一步：先将front对应的值保留到一个临时变量
//        第二步：再将front后移，考虑取模
//        第三步：将临时保存的变量返回
        int value = arr[front];
        front = (front + 1) % maxSize;
        return value;
    }
//         显示当前队列有效数据的个数
    public int size(){
        return (rear + maxSize-front) % maxSize;
    }
    //    显示队列所有数据
    public void showQueue() {
        if (isEmpty()) {
            System.out.println("队列目前为空！无数据！");
            return;
        }
        for (int i = front; i < front +size(); i++) {
            System.out.println(i % maxSize+ "=" + arr[i %maxSize]);
        }
    }
    //    显示队列的头数据
    public void headQueue() {
        if (isEmpty()) {
            System.out.println("队列目前为空！无数据！");

        }
        System.out.println("目前队列头为："+arr[front + 1]);
    }
}

三、链表
/**
 * @author Cloud7Walker
 * @date 2020/3/12 - 17:10
 */
public class SingleLinkedListTest01 {
    public static void main(String[] args) {
//        创建节点
        HeroNode hero01 = new HeroNode(1,"盖伦","gay伦");
        HeroNode hero02 = new HeroNode(2,"艾希","寒冰");
        HeroNode hero03 = new HeroNode(3,"崔丝塔娜","小炮");
        HeroNode hero04 = new HeroNode(4,"格雷福斯","男枪");
        HeroNode hero05 = new HeroNode(5,"卡莉斯塔","滑板鞋");
        HeroNode hero06 = new HeroNode(6,"卢锡安","奥巴马");
//        创建链表
        SingleLinkedList singleLinkedList = new SingleLinkedList();
//        加入节点
        singleLinkedList.addByOrder(hero01);
        singleLinkedList.addByOrder(hero03);
        singleLinkedList.addByOrder(hero02);
        singleLinkedList.addByOrder(hero04);
        singleLinkedList.addByOrder(hero05);
        singleLinkedList.addByOrder(hero06);
        singleLinkedList.addByOrder(hero03);
//        显示链表
        singleLinkedList.list();
    }
}
//定义SingleLinkedList管理我们的英雄
class SingleLinkedList{
//初始化头节点，不能动，不存放具体数据
    private HeroNode head = new HeroNode(0,"","");

//添加节点到单链表
    public void add(HeroNode heroNode){
//        head节点不能动，故需要一个辅助变量 temp
        HeroNode temp = head;
//        找到链表的最后
        while (true){
            if(temp.next == null){
                break;
            }
//            如果没有找到最后，就将temp右移
            temp = temp.next;
        }
//        当退出while循环时，temp就指向了链表的最后
        temp.next = heroNode;
    }



//第二种添加方式是：在添加英雄时，会根据排名将英雄插入到指定位置
//如果有这个排名，则添加失败，并给出提示
    public void addByOrder(HeroNode heroNode){
//头节点不能动，故仍需通过一个辅助变量来帮助找到添加的位置
//因为是单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了
        HeroNode temp = head;
        boolean flag = false;//flag标志添加的编号是否存在，默认为false
        while (true){
            if(temp.next ==null){//说明temp已经在链表最后了
                break;
            }
            if (temp.next.No > heroNode.No) {//位置找到了，就在temp的后面插入
                break;
            }else if (temp.next.No == heroNode.No){//说明希望添加的heroNode的编号已经存在
                flag = true;
                break;
            }
            temp = temp.next;//后移，遍历当前链表
        }
//        判断flag的值
        if(flag){//不能添加，说明编号存在
            System.out.println("准备插入的英雄编号："+heroNode.No+"已经存在！");
        }else{
//            插入到链表中
            heroNode.next = temp.next;
            temp.next = heroNode;
        }

    }

//    显示链表【遍历】
    public void list(){
//    判断链表是否为空
        if(head.next ==null){
            System.out.println("链表为空");
            return;
        }
//        因为头节点不能动，因此需要一个辅助变量来遍历
        HeroNode temp = head.next;
        while (true){
//            判断是否到了链表的最后
            if(temp == null){
                break;
            }
//           输出节点信息
            System.out.println(temp);
//            将temp后移
            temp = temp.next;
        }
    }
}

//定义HeroNode,每个HeroNode对象就是一个节点
class HeroNode{
    public int No;
    public String Name;
    public String nickName;
    public HeroNode next;


public HeroNode(int hNo,String hName,String hnickName){
        this.No = hNo;
        this.Name = hName;
        this.nickName = hnickName;
}

    @Override //为了显示方法，重写toString方法
    public String toString() {
        return "HeroNode{" +
                "No=" + No +
                ", Name='" + Name + '\'' +
                ", nickName='" + nickName + '\''  +
                '}';
    }

}

修改、删除、查询】


1231231231231231123
121213123
12312311111111111111
233333333333333333
